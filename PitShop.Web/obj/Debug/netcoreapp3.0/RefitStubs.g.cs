// <auto-generated />
using System;
using System.Net.Http;
using System.Collections.Generic;
using PitShop.Web.Commands;
using PitShop.Web.Models;
using Refit;
using System.Threading.Tasks;

/* ******** Hey You! *********
 *
 * This is a generated file, and gets rewritten every time you build the
 * project. If you want to edit it, you need to edit the mustache template
 * in the Refit package */

#pragma warning disable
namespace PitShop.Web.RefitInternalGenerated
{
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [AttributeUsage (AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Enum | AttributeTargets.Constructor | AttributeTargets.Method | AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Event | AttributeTargets.Interface | AttributeTargets.Delegate)]
    sealed class PreserveAttribute : Attribute
    {

        //
        // Fields
        //
        public bool AllMembers;

        public bool Conditional;
    }
}
#pragma warning restore

namespace PitShop.Web.Microservices.Abstraction
{
    using PitShop.Web.RefitInternalGenerated;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedICustomerManagementAPI : ICustomerManagementAPI
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedICustomerManagementAPI(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<List<Customer>> ICustomerManagementAPI.GetCustomers()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetCustomers", new Type[] {  });
            return (Task<List<Customer>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<Customer> ICustomerManagementAPI.GetCustomerById(string customerId)
        {
            var arguments = new object[] { customerId };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetCustomerById", new Type[] { typeof(string) });
            return (Task<Customer>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task ICustomerManagementAPI.RegisterCustomer(RegisterCustomer command)
        {
            var arguments = new object[] { command };
            var func = requestBuilder.BuildRestResultFuncForMethod("RegisterCustomer", new Type[] { typeof(RegisterCustomer) });
            return (Task)func(Client, arguments);
        }
    }
}

namespace PitShop.Web.Microservices.Abstraction
{
    using PitShop.Web.RefitInternalGenerated;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIVehicleManagementAPI : IVehicleManagementAPI
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIVehicleManagementAPI(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<List<Vehicle>> IVehicleManagementAPI.GetVehicles()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetVehicles", new Type[] {  });
            return (Task<List<Vehicle>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<Vehicle> IVehicleManagementAPI.GetVehicleByLicenseNumber(string licenseNumber)
        {
            var arguments = new object[] { licenseNumber };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetVehicleByLicenseNumber", new Type[] { typeof(string) });
            return (Task<Vehicle>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IVehicleManagementAPI.RegisterVehicle(RegisterVehicleCommand command)
        {
            var arguments = new object[] { command };
            var func = requestBuilder.BuildRestResultFuncForMethod("RegisterVehicle", new Type[] { typeof(RegisterVehicleCommand) });
            return (Task)func(Client, arguments);
        }
    }
}

namespace PitShop.Web.Microservices.Abstraction
{
    using PitShop.Web.RefitInternalGenerated;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIWorkshopManagementAPI : IWorkshopManagementAPI
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIWorkshopManagementAPI(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<WorkshopPlanning> IWorkshopManagementAPI.GetWorkshopPlanning(string planningDate)
        {
            var arguments = new object[] { planningDate };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetWorkshopPlanning", new Type[] { typeof(string) });
            return (Task<WorkshopPlanning>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<MaintenanceJob> IWorkshopManagementAPI.GetMaintenanceJob(string planningDate, string jobId)
        {
            var arguments = new object[] { planningDate, jobId };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetMaintenanceJob", new Type[] { typeof(string), typeof(string) });
            return (Task<MaintenanceJob>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IWorkshopManagementAPI.RegisterPlanning(string planningDate, RegisterPlanningCommand cmd)
        {
            var arguments = new object[] { planningDate, cmd };
            var func = requestBuilder.BuildRestResultFuncForMethod("RegisterPlanning", new Type[] { typeof(string), typeof(RegisterPlanningCommand) });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IWorkshopManagementAPI.PlanMaintenanceJob(string planningDate, PlanMaintenanceJobCommand cmd)
        {
            var arguments = new object[] { planningDate, cmd };
            var func = requestBuilder.BuildRestResultFuncForMethod("PlanMaintenanceJob", new Type[] { typeof(string), typeof(PlanMaintenanceJobCommand) });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IWorkshopManagementAPI.FinishMaintenanceJob(string planningDate, string jobId, FinishMaintenanceJobCommand cmd)
        {
            var arguments = new object[] { planningDate, jobId, cmd };
            var func = requestBuilder.BuildRestResultFuncForMethod("FinishMaintenanceJob", new Type[] { typeof(string), typeof(string), typeof(FinishMaintenanceJobCommand) });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<List<Customer>> IWorkshopManagementAPI.GetCustomers()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetCustomers", new Type[] {  });
            return (Task<List<Customer>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<Customer> IWorkshopManagementAPI.GetCustomerById(string id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetCustomerById", new Type[] { typeof(string) });
            return (Task<Customer>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<List<Vehicle>> IWorkshopManagementAPI.GetVehicles()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetVehicles", new Type[] {  });
            return (Task<List<Vehicle>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<Vehicle> IWorkshopManagementAPI.GetVehicleByLicenseNumber(string licenseNumber)
        {
            var arguments = new object[] { licenseNumber };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetVehicleByLicenseNumber", new Type[] { typeof(string) });
            return (Task<Vehicle>)func(Client, arguments);
        }
    }
}
